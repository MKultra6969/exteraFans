import os
import subprocess
import sys

class Colors:
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BLUE = '\033[94m'
    BOLD = '\033[1m'
    RESET = '\033[0m'

def print_header(title, color=Colors.BLUE):
    print(f"\n{color}{Colors.BOLD}--- {title.upper()} ---{Colors.RESET}")


def run_command(command, stream_output=False):
    try:
        if stream_output:
            print(f"{Colors.YELLOW}–í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ (–Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)...{Colors.RESET}")
            subprocess.run(command, check=False)
            return True

        result = subprocess.run(
            command,
            capture_output=True,
            text=True,
            encoding='utf-8',
            check=False
        )
        if result.returncode == 0:
            print(f"{Colors.GREEN}‚úÖ –£—Å–ø–µ—à–Ω–æ!{Colors.RESET}")
            if result.stdout:
                print(result.stdout)
            return True
        else:
            print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞!{Colors.RESET}")
            print(f"{Colors.RED}{result.stderr}{Colors.RESET}")
            return False

    except FileNotFoundError:
        print(f"{Colors.RED}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: `docker-compose` –Ω–µ –Ω–∞–π–¥–µ–Ω.{Colors.RESET}")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker –∏ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ PATH.")
        return False
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}üö´ –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.{Colors.RESET}")
        return False


def check_env_file():
    if os.path.exists(".env"):
        return True

    print_header("–ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò", Colors.YELLOW)
    print(f"{Colors.YELLOW}‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ `.env` –Ω–µ –Ω–∞–π–¥–µ–Ω.{Colors.RESET}")

    try:
        answer = input("   –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ (`.env.exemple`)? [Y/n]: ").lower().strip()
    except EOFError:
        answer = 'n'

    if answer in ('y', 'yes', ''):
        try:
            with open(".env.exemple", "r", encoding="utf-8") as f_example, \
                    open(".env", "w", encoding="utf-8") as f_env:
                f_env.write(f_example.read())

            print(f"\n{Colors.GREEN}‚úÖ –§–∞–π–ª `.env` —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.{Colors.RESET}")
            print(
                f"{Colors.BOLD}   –¢–µ–ø–µ—Ä—å –æ—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ, –≤–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ (BOT_TOKEN –∏ —Ç.–¥.), —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `start` —Å–Ω–æ–≤–∞.{Colors.RESET}")
            print(f"   –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {os.path.abspath('.env')}")
        except FileNotFoundError:
            print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª `.env.exemple` –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ø–∏–∏.{Colors.RESET}")
    else:
        print(f"{Colors.YELLOW}üö´ –ó–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –±–µ–∑ —Ñ–∞–π–ª–∞ `.env`.{Colors.RESET}")

    return False


def print_help():
    print_header("–°–ü–†–ê–í–ö–ê –ü–û –£–ü–†–ê–í–õ–ï–ù–ò–Æ –ë–û–¢–û–ú", Colors.GREEN)
    print(f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: {Colors.BOLD}python manage.py [–∫–æ–º–∞–Ω–¥–∞]{Colors.RESET}\n")
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print(f"  {Colors.GREEN}start{Colors.RESET}   - –°–æ–±—Ä–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.")
    print(f"  {Colors.YELLOW}stop{Colors.RESET}    - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±–æ—Ç–∞.")
    print(f"  {Colors.BLUE}restart{Colors.RESET} - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.")
    print(f"  {Colors.YELLOW}logs{Colors.RESET}    - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ (–∂—É—Ä–Ω–∞–ª —Ä–∞–±–æ—Ç—ã) –±–æ—Ç–∞.")
    print(f"  {Colors.BLUE}status{Colors.RESET}  - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.")
    print(f"  {Colors.BOLD}help{Colors.RESET}    - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    print("\n–ü—Ä–∏–º–µ—Ä:")
    print(f"  {Colors.BOLD}python manage.py start{Colors.RESET}")


def main():
    if len(sys.argv) < 2:
        print_help()
        return

    command = sys.argv[1].lower()

    if command == "start":
        print_header("–ó–ê–ü–£–°–ö –ë–û–¢–ê")
        if check_env_file():
            print("–°–æ–±–∏—Ä–∞—é –æ–±—Ä–∞–∑ –∏ –∑–∞–ø—É—Å–∫–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...")
            run_command(["docker-compose", "up", "--build", "-d"])

    elif command == "stop":
        print_header("–û–°–¢–ê–ù–û–í–ö–ê –ë–û–¢–ê")
        print("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∏ —É–¥–∞–ª—è—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...")
        run_command(["docker-compose", "down"])

    elif command == "restart":
        print_header("–ü–ï–†–ï–ó–ê–ü–£–°–ö –ë–û–¢–ê")
        print("1/2: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...")
        if run_command(["docker-compose", "down"]):
            print("\n2/2: –ó–∞–ø—É—Å–∫–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–Ω–æ–≤–æ...")
            run_command(["docker-compose", "up", "--build", "-d"])

    elif command == "logs":
        print_header("–õ–û–ì–ò –ë–û–¢–ê")
        run_command(["docker-compose", "logs", "-f", "--tail=100"], stream_output=True)

    elif command == "status":
        print_header("–°–¢–ê–¢–£–° –ö–û–ù–¢–ï–ô–ù–ï–†–ê")
        run_command(["docker-compose", "ps"])

    elif command in ("help", "-h", "--help"):
        print_help()

    else:
        print(f"{Colors.RED}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: '{command}'{Colors.RESET}")
        print_help()


if __name__ == "__main__":
    main()