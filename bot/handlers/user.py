import re
from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message

from bot.config import ADMINS
from bot.services import filters, storage, console_logger
from bot.keyboards import inline
import html

user_router = Router()

PENDING_APPLICATIONS = {}

USERNAME_REGEX = re.compile(r'(@[a-zA-Z0-9_]{5,32})')

def escape_markdown_v2(text: str) -> str:
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{char}' if char in escape_chars else char for char in text)

@user_router.message(CommandStart(), F.chat.type == "private")
@user_router.message(Command("help"), F.chat.type == "private")
async def command_start_handler(message: Message):
    safe_full_name = html.escape(message.from_user.full_name)
    await message.answer(f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {safe_full_name}!</b>", parse_mode="HTML")

    guide_text = storage.get_guide_text()
    if guide_text:
        await message.answer(guide_text, parse_mode="HTML", disable_web_page_preview=True)
    else:
        default_guide = (
            "<b>–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É:</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<pre>–¢–µ–∫—Å—Ç —Ç–≤–æ–µ–π –∑–∞—è–≤–∫–∏ @—Ç–≤–æ–π_username –¥–æ–ø. –∏–Ω—Ñ–æ</pre>\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>Legend: @mkultra6969 —á–ø–æ–∫–∞–µ—Ç –≤—Å–µ—Ö –≤ —Ä–æ—Ç</code>\n\n"
            "–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ."
        )
        await message.answer(default_guide, parse_mode="HTML")

@user_router.message(F.text, ~F.text.startswith('/'), F.chat.type == "private")
@user_router.edited_message(F.text, ~F.text.startswith('/'), F.chat.type == "private")
async def handle_user_application(message: Message, bot: Bot):
    user_id = message.from_user.id

    banned_users = storage.get_banned_users()
    if str(user_id) in banned_users:
        reason = banned_users[str(user_id)].get("reason", "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.")
        await message.reply(f"‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏.\n**–ü—Ä–∏—á–∏–Ω–∞:** {reason}")
        return

    text = message.text

    banned_word = filters.check_for_banwords(text)
    if banned_word:
        await message.reply(f"‚ùå **–û—Ç–∫–∞–∑.** –í –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: `{banned_word}`")
        return

    match = USERNAME_REGEX.search(text)
    if not match:
        await message.reply("‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞—è–≤–∫–∏.**\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à `@username`.")
        return

    username = match.group(1)
    parts = text.split(username)
    text_before = parts[0].strip()
    text_after = parts[1].strip()

    if not text_before:
        await message.reply("‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞—è–≤–∫–∏.**\n–ü–µ—Ä–µ–¥ –≤–∞—à–∏–º `@username` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–∞–∫–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç.")
        return

    if len(text_after) > 25:
        await message.reply(f"‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞—è–≤–∫–∏.**\n–ü–æ—Å–ª–µ –≤–∞—à–µ–≥–æ `@username` —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤ ({len(text_after)}/25).")
        return

    PENDING_APPLICATIONS[user_id] = {
        "text": text,
        "admin_messages": []
    }

    console_logger.log_new_application(message.from_user.full_name, user_id)

    admin_keyboard = inline.get_admin_approval_keyboard(user_id)
    admin_message_text = (
        f"‚ùóÔ∏è **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞**\n\n"
        f"–û—Ç: {message.from_user.full_name} (ID: `{user_id}`)\n\n"
        f"–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏:\n`{text}`"
    )

    for admin_id in ADMINS:
        try:
            sent_message = await bot.send_message(
                chat_id=admin_id,
                text=admin_message_text,
                reply_markup=admin_keyboard,
                parse_mode="Markdown"
            )
            PENDING_APPLICATIONS[user_id]["admin_messages"].append(
                (admin_id, sent_message.message_id)
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    await message.reply("‚úÖ **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.**")