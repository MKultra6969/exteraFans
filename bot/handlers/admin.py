from aiogram import Router, F, Bot
from aiogram.filters import Command, BaseFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest

from bot.config import ADMINS, CHANNEL_ID
from bot.services import storage, builder, channel_service, console_logger
from bot.handlers.user import PENDING_APPLICATIONS
import html

class AdminFilter(BaseFilter):
    async def __call__(self, event: Message | CallbackQuery) -> bool:
        return event.from_user.id in ADMINS

class AdminDeclineState(StatesGroup):
    waiting_for_reason = State()

admin_router = Router()
admin_router.message.filter(AdminFilter())
admin_router.callback_query.filter(AdminFilter())

async def _update_all_admin_messages(bot: Bot, user_id: int, new_text: str):
    app_data = PENDING_APPLICATIONS.get(user_id)
    if not app_data or not app_data.get("admin_messages"):
        return

    for chat_id, message_id in app_data["admin_messages"]:
        try:
            await bot.edit_message_text(
                text=new_text,
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=None,
                parse_mode="Markdown"
            )
        except TelegramBadRequest as e:
            if "message to edit not found" in str(e):
                continue
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")

@admin_router.message(Command("help"))
async def admin_help_command(message: Message):
    admin_help_text = (
        "**–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å | –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã**\n\n"
        "**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (HTML-—Ä–∞–∑–º–µ—Ç–∫–∞):**\n"
        "‚Ä¢ `/setguide [—Ç–µ–∫—Å—Ç]` ‚Äî –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –≤–∏–¥—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ—Å–ª–µ `/start`.\n"
        "‚Ä¢ `/getguide` ‚Äî –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n"
        "‚Ä¢ `/delguide` ‚Äî –£–¥–∞–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n\n"
        "**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ (HTML-—Ä–∞–∑–º–µ—Ç–∫–∞):**\n"
        "‚Ä¢ `/setcontent [—Ç–µ–∫—Å—Ç]` ‚Äî –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞.\n"
        "‚Ä¢ `/getcontent` ‚Äî –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
        "‚Ä¢ `/delcontent` ‚Äî –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç.\n\n"
        "**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω-–ª–∏—Å—Ç–æ–º (—Å–ª–æ–≤–∞):**\n"
        "‚Ä¢ `/addban [—Å–ª–æ–≤–æ]` ‚Äî –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–æ –≤ –±–∞–Ω-–ª–∏—Å—Ç.\n"
        "‚Ä¢ `/listban` ‚Äî –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Å—å –±–∞–Ω-–ª–∏—Å—Ç.\n\n"
        "**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
        "‚Ä¢ `/ban [id/@username] [–ø—Ä–∏—á–∏–Ω–∞]` ‚Äî –ë–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ñ–∞–Ω–∞—Ç–æ–≤.\n"
        "‚Ä¢ `/unban [id]` ‚Äî –°–Ω–∏–º–∞–µ—Ç –±–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
        "‚Ä¢ `/banlist` ‚Äî –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
        "**–ü—Ä–æ—á–µ–µ:**\n"
        "‚Ä¢ `/cancel` ‚Äî –û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞)."
    )
    await message.answer(admin_help_text, parse_mode="Markdown")


@admin_router.callback_query(F.data.startswith("approve:"))
async def handle_approve_callback(callback: CallbackQuery, bot: Bot):
    user_id = int(callback.data.split(":")[1])

    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    app_data = PENDING_APPLICATIONS.get(user_id)
    if not app_data:
        await callback.message.edit_text(
            f"{callback.message.text}\n\n‚ö†Ô∏è **–û—à–∏–±–∫–∞:** –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª—Å—è). –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
        await callback.answer("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    original_text = app_data["text"]
    storage.add_fan(original_text)

    success, error = await channel_service.update_channel_post(bot)

    if not success:
        await callback.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {error}", show_alert=True)
        final_text = (
            f"{callback.message.text.split('–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏:')[0]}"
            f"–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏:\n`{original_text}`\n\n"
            f"‚úÖ **–û–¥–æ–±—Ä–µ–Ω–æ (–ª–æ–∫–∞–ª—å–Ω–æ)** –∞–¥–º–∏–Ω–æ–º {callback.from_user.full_name}\n"
            f"‚ùóÔ∏è **–ù–û:** –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ. –û—à–∏–±–∫–∞: {error}"
        )
        await _update_all_admin_messages(bot, user_id, final_text)
        PENDING_APPLICATIONS.pop(user_id, None)
        return

    console_logger.log_application_approved(callback.from_user.full_name, user_id)

    final_text = (
        f"{callback.message.text.split('–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏:')[0]}"
        f"–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏:\n`{original_text}`\n\n"
        f"‚úÖ **–û–¥–æ–±—Ä–µ–Ω–æ** –∞–¥–º–∏–Ω–æ–º {callback.from_user.full_name}"
    )
    await _update_all_admin_messages(bot, user_id, final_text)

    PENDING_APPLICATIONS.pop(user_id, None)

    try:
        await bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫!")
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏: {e}")
    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω!")


@admin_router.callback_query(F.data.startswith("decline:"))
async def handle_decline_callback(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split(":")[1])

    if user_id not in PENDING_APPLICATIONS:
        await callback.message.edit_text(f"{callback.message.text}\n\n‚ö†Ô∏è **–û—à–∏–±–∫–∞:** –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª—Å—è).")
        await callback.answer("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    await state.update_data(
        user_to_notify=user_id,
        original_admin_message_text=callback.message.text
    )
    await state.set_state(AdminDeclineState.waiting_for_reason)
    await callback.message.edit_text(f"{callback.message.text}\n\n‚úçÔ∏è **–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞...** (–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /cancel)")
    await callback.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞")



@admin_router.message(Command("cancel"))
async def cancel_decline(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


@admin_router.message(AdminDeclineState.waiting_for_reason)
async def handle_decline_reason(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    user_id = data.get("user_to_notify")
    reason = message.text
    original_admin_message_text = data.get("original_admin_message_text")

    console_logger.log_application_declined(message.from_user.full_name, user_id, reason)

    final_text = (
        f"{original_admin_message_text}\n\n"
        f"‚ùå **–û—Ç–∫–ª–æ–Ω–µ–Ω–æ** –∞–¥–º–∏–Ω–æ–º {message.from_user.full_name}\n"
        f"**–ü—Ä–∏—á–∏–Ω–∞:** {reason}"
    )
    await _update_all_admin_messages(bot, user_id, final_text)

    PENDING_APPLICATIONS.pop(user_id, None)

    try:
        await bot.send_message(user_id, f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n**–ü—Ä–∏—á–∏–Ω–∞:** {reason}")
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")

    await message.reply(f"–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    await state.clear()


@admin_router.message(Command("addban"))
async def add_banword_command(message: Message, command: Command):
    if not command.args:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/addban —Å–ª–æ–≤–æ`")
        return
    word = command.args.strip()
    if storage.add_banword(word):
        console_logger.log_banword_added(message.from_user.full_name, word)
        await message.reply(f"‚úÖ –°–ª–æ–≤–æ `{word}` –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–Ω-–ª–∏—Å—Ç.")
    else:
        await message.reply(f"‚ö†Ô∏è –°–ª–æ–≤–æ `{word}` —É–∂–µ –±—ã–ª–æ –≤ –±–∞–Ω-–ª–∏—Å—Ç–µ.")


@admin_router.message(Command("listban"))
async def list_banwords_command(message: Message):
    banwords = storage.get_banwords()
    if not banwords:
        await message.reply("üö´ –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç.")
        return
    text = "üìù **–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤:**\n\n" + "\n".join([f"‚Ä¢ `{word}`" for word in banwords])
    await message.reply(text)


@admin_router.message(Command("setcontent"))
@admin_router.edited_message(Command("setcontent"))
async def set_content_command(message: Message, bot: Bot):
    if message.entities and message.entities[0].type == "bot_command":
        command_len = message.entities[0].length
        content_text = message.html_text[command_len:].strip()
    else:
        content_text = message.html_text.replace("/setcontent", "", 1).strip()

    if not content_text:
        await message.reply(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/setcontent –í–∞—à —Ç–µ–∫—Å—Ç...`\n"
            "–¢–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."
        )
        return

    storage.set_content_text(content_text)
    console_logger.log_content_updated(message.from_user.full_name)
    await message.reply("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ...")

    success, error = await channel_service.update_channel_post(bot)
    if success:
        await message.answer("‚úÖ –ü–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
    else:
        await message.answer(f"‚ö†Ô∏è **–û—à–∏–±–∫–∞:** –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ. {error}")


@admin_router.message(Command("getcontent"))
async def get_content_command(message: Message):
    content = storage.get_content_text()
    if content:
        await message.answer(f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n\n`{content}`")
    else:
        await message.answer("–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω.")


@admin_router.message(Command("delcontent"))
async def delete_content_command(message: Message, bot: Bot):
    storage.set_content_text("")
    console_logger.log_content_updated(message.from_user.full_name)
    await message.reply("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —É–¥–∞–ª–µ–Ω. –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ...")

    success, error = await channel_service.update_channel_post(bot)
    if success:
        await message.answer("‚úÖ –ü–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
    else:
        await message.answer(f"‚ö†Ô∏è **–û—à–∏–±–∫–∞:** –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ. {error}")


@admin_router.message(Command("ban"))
async def ban_user_command(message: Message, command: Command, bot: Bot):
    if not command.args:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/ban @username/id [–ø—Ä–∏—á–∏–Ω–∞]`")
        return

    args = command.args.split(maxsplit=1)
    target_str = args[0]
    reason = args[1] if len(args) > 1 else "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"

    target_id = None
    target_username = None

    if target_str.isdigit():
        target_id = int(target_str)
    elif target_str.startswith('@'):
        target_username = target_str
        for uid, text in PENDING_APPLICATIONS.items():
            if target_username in text:
                target_id = uid
                break
    else:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–ª–∏. –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–≥–æ @username.")
        return

    if not target_id:
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –¥–ª—è `{target_str}`. "
                            f"–ë–∞–Ω –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–æ–π. "
                            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ ID.")
        return

    if target_id in ADMINS:
        await message.reply("–ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    storage.ban_user(user_id=target_id, reason=reason, admin_id=message.from_user.id)
    console_logger.log_user_banned(message.from_user.full_name, target_id, reason)
    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{target_id}` –∑–∞–±–∞–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")

    fan_removed = False
    text_to_find = target_username if target_username else str(target_id)

    if storage.remove_fan_by_text_part(text_to_find):
        fan_removed = True

    if fan_removed:
        await message.answer(
            f"üßπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{text_to_find}` –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ñ–∞–Ω–∞—Ç–æ–≤. –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ...")
        success, error = await channel_service.update_channel_post(bot)
        if success:
            await message.answer("‚úÖ –ü–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
        else:
            await message.answer(f"‚ö†Ô∏è **–û—à–∏–±–∫–∞:** –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ. {error}")
    elif target_username:
        await message.answer(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{target_username}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ —Ñ–∞–Ω–∞—Ç–æ–≤.")


@admin_router.message(Command("unban"))
async def unban_user_command(message: Message, command: Command):
    if not command.args or not command.args.strip().isdigit():
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/unban id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`")
        return

    user_id = int(command.args.strip())

    if storage.unban_user(user_id):
        console_logger.log_user_unbanned(message.from_user.full_name, user_id)
        await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{user_id}` —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    else:
        await message.reply(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö.")


@admin_router.message(Command("banlist"))
async def banlist_command(message: Message):
    banned_users = storage.get_banned_users()
    if not banned_users:
        await message.reply("üö´ –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return

    text = "üìù **–°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n"
    for user_id, info in banned_users.items():
        text += (
            f"‚Ä¢ **ID:** `{user_id}`\n"
            f"  **–ü—Ä–∏—á–∏–Ω–∞:** {info.get('reason', '–Ω/—É')}\n"
            f"  **–ó–∞–±–∞–Ω–∏–ª:** `{info.get('banned_by', '–Ω/—É')}`\n\n"
        )

    if len(text) > 4096:
        await message.reply("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Å–ø–∏—Å–æ–∫, –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        for i in range(0, len(text), 4096):
            await message.answer(text[i:i + 4096])
    else:
        await message.reply(text)

@admin_router.message(Command("setguide"))
@admin_router.edited_message(Command("setguide"))
async def set_guide_command(message: Message):
    if message.entities and message.entities[0].type == "bot_command":
        command_len = message.entities[0].length
        guide_text = message.html_text[command_len:].strip()
    else:
        guide_text = message.html_text.replace("/setguide", "", 1).strip()

    if not guide_text:
        await message.reply(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/setguide –í–∞—à —Ç–µ–∫—Å—Ç...`\n"
            "–¢–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."
        )
        return

    storage.set_guide_text(guide_text)
    console_logger.log_guide_updated(message.from_user.full_name)
    await message.reply("‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")


@admin_router.message(Command("getguide"))
async def get_guide_command(message: Message):
    guide = storage.get_guide_text()
    if guide:
        await message.answer("–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
        await message.answer(guide, parse_mode="HTML")
        await message.answer("–î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:")
        await message.answer(f"<code>{html.escape(guide)}</code>", parse_mode="HTML")
    else:
        await message.answer("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞.")


@admin_router.message(Command("delguide"))
async def delete_guide_command(message: Message):
    storage.set_guide_text("")
    console_logger.log_guide_updated(message.from_user.full_name)
    await message.reply("‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–¥–∞–ª–µ–Ω–∞.")